/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    behaviors {
        mt_t: mt_t {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_T";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
        };

        lt_h: lt_h {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_H";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp RIGHT         &kp Q  &kp W     &kp E      &kp R              &kp T          &kp Y              &kp U              &kp I        &kp O               &kp P     &kp LEFT_BRACKET
  &mt LCTRL ESCAPE  &kp A  &kp S     &kp D      &kp F              &kp G          &kp H              &kp J              &kp K        &kp L               &kp SEMI  &mt RCTRL SQT
  &kp LALT          &kp Z  &kp X     &kp C      &kp V              &kp B          &kp N              &kp M              &kp COMMA    &kp DOT             &kp FSLH  &mt RALT RIGHT_BRACKET
                           &kp LGUI  &lt 2 TAB  &mt_t LSHFT SPACE  &lt_h 1 RET    &lt_h 1 BACKSPACE  &mt_t RSHFT SPACE  &lt 2 GRAVE  &mt RGUI LG(SPACE)
            >;
        };

        lower_layer {
            bindings = <
  &kp PIPE             &kp NUMBER_1  &kp NUMBER_2     &kp NUMBER_3    &kp NUMBER_4           &kp N5                  &kp NUMBER_6       &kp N7             &kp N8         &kp N9                &kp N0                 &kp BACKSLASH
  &mt LCTRL MINUS      &kp EXCL      &kp AT           &kp HASH        &kp DLLR               &kp PRCNT               &kp CARET          &kp AMPS           &kp STAR       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &mt RCTRL EQUAL
  &mt LALT UNDERSCORE  &none         &kp RIGHT_BRACE  &kp LEFT_BRACE  &kp RIGHT_PARENTHESIS  &kp LEFT_PARENTHESIS    &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp LESS_THAN  &kp GREATER_THAN      &none                  &mt RIGHT_ALT PLUS
                                     &trans           &lt 3 TAB       &trans                 &trans                  &kp LA(BACKSPACE)  &trans             &lt 3 GRAVE    &trans
            >;
        };

        raise_layer {
            bindings = <
  &kp LC(PRINTSCREEN)      &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS    &kp C_PLAY_PAUSE  &kp C_VOL_DN    &kp C_VOL_UP  &kp C_MUTE  &kp C_BRIGHTNESS_INC  &kp PRINTSCREEN
  &mt LCTRL EQUAL          &kp KP_ASTERISK  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS     &kp LEFT_ARROW    &kp DOWN_ARROW  &kp UP        &kp RIGHT   &kp C_BRIGHTNESS_DEC  &mt RCTRL K_APP
  &mt LEFT_ALT KP_NUMLOCK  &kp KP_N0        &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_DOT      &kp HOME          &kp PAGE_DOWN   &kp PG_UP     &kp END     &kp INS               &kp DEL
                                            &trans     &trans     &trans     &lt 3 RET       &lt 3 BACKSPACE   &trans          &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
  &bootloader  &none         &none         &none         &none         &none           &kp CAPSLOCK  &kp SCROLLLOCK  &kp PAUSE_BREAK  &none    &none    &none
  &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F1        &kp F2          &kp F3           &kp F4   &kp F5   &kp F6
  &sys_reset   &none         &none         &none         &none         &none           &kp F7        &kp F8          &kp F9           &kp F10  &kp F11  &kp F12
                             &none         &trans        &none         &trans          &trans        &none           &trans           &none
            >;
        };
    };
};
